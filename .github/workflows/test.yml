name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10.0, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt # For pytest, pytest-cov
    
    - name: Create test database
      run: |
        # Ensures quiz.db is created inside the backend directory
        (cd backend && python -c "from database import init_db; init_db()")
        # Create .env at root for tests
        echo "LLM_PROVIDER=openai" > .env
        echo "OPENAI_API_KEY=test_key" >> .env
        echo "OPENAI_MODEL=gpt-3.5-turbo" >> .env
        echo "PYTHONPATH=." >> .env

    - name: Run backend Pytest suite & Generate Coverage
      run: |
        # Run all backend tests using pytest from project root
        # This will find tests in tests/backend/
        # Coverage for the 'backend' module, outputting xml and html reports to root
        python -m pytest tests/backend/ --cov=backend --cov-report=xml --cov-report=html
    
    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml # Pytest with --cov-report=xml outputs to root by default
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        CI=true npm test -- --coverage --watchAll=false
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install all dependencies
      run: |
        # Backend dependencies
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt
        
        # Frontend dependencies
        (cd frontend && npm ci) # Run npm ci in the frontend directory
    
    - name: Create test database and .env for integration tests
      run: |
        (cd backend && python -c "from database import init_db; init_db()")
        echo "LLM_PROVIDER=openai" > .env
        echo "OPENAI_API_KEY=test_key_integration" >> .env # differentiate if needed
        echo "OPENAI_MODEL=gpt-3.5-turbo" >> .env
        echo "PYTHONPATH=." >> .env

    - name: Run full test suite
      run: |
        chmod +x run_tests.sh
        ./run_tests.sh
    
    - name: Upload test results and coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-and-coverage
        path: |
          coverage.xml
          frontend/coverage/
          logs/ # If logs are generated here and are useful
          # Add backend html coverage report if generated by run_tests.sh and useful
          # htmlcov/ (if pytest generates it there)
        # To make backend HTML coverage available, run_tests.sh should ensure it's created.
        # Current run_tests.sh for backend: python -m pytest ${BACKEND_SUITE_PATH} --cov=backend --cov-report=xml --cov-report=term-missing
        # To get HTML: --cov-report=html (would create htmlcov/ by default)
        # Let's assume for now coverage.xml and frontend/coverage are the primary artifacts.

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        docker build -t quizly-backend -f backend/Dockerfile backend/
    
    - name: Build frontend Docker image
      run: |
        docker build -t quizly-frontend -f frontend/Dockerfile frontend/
    
    - name: Test Docker containers
      run: |
        # Test that containers can start
        docker run --rm -d --name test-backend -p 8000:8000 quizly-backend &
        docker run --rm -d --name test-frontend -p 3000:3000 quizly-frontend &
        
        # Wait for containers to start
        sleep 10
        
        # Test endpoints
        curl -f http://localhost:8000/api/health || echo "Backend health check failed"
        curl -f http://localhost:3000 || echo "Frontend health check failed"
        
        # Cleanup
        docker stop test-backend test-frontend || true
